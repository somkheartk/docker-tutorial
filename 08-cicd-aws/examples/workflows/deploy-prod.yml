name: Deploy to Production Environment

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: true
      version:
        description: 'Version to deploy (tag or commit SHA)'
        required: true

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: myapp-prod
  ECS_SERVICE: myapp-prod-service
  ECS_CLUSTER: myapp-prod-cluster
  ECS_TASK_DEFINITION: task-definitions/task-definition-prod.json
  CONTAINER_NAME: myapp
  ENVIRONMENT: prod

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run linting
        run: npm run lint

      - name: Run integration tests
        run: npm run test:integration || echo "Integration tests not configured"

      - name: Run e2e tests
        run: npm run test:e2e || echo "E2E tests not configured"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run security audit
        run: |
          echo "Running security scans..."
          npm audit --production --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          # Add additional security scanning tools here

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.sha }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          VERSION_TAG: ${{ steps.version.outputs.version }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:prod-latest
          
          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:prod-latest
          
          # Output image URI
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Scan image for vulnerabilities
        run: |
          aws ecr start-image-scan --repository-name $ECR_REPOSITORY --image-id imageTag=${{ github.sha }}
          
          # Wait for scan to complete
          sleep 60
          
          # Check scan results and fail if critical vulnerabilities found
          SCAN_FINDINGS=$(aws ecr describe-image-scan-findings \
            --repository-name $ECR_REPOSITORY \
            --image-id imageTag=${{ github.sha }} \
            --query 'imageScanFindings.findingSeverityCounts.CRITICAL' \
            --output text)
          
          if [ "$SCAN_FINDINGS" != "None" ] && [ "$SCAN_FINDINGS" != "" ] && [ "$SCAN_FINDINGS" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found! Count: $SCAN_FINDINGS"
            exit 1
          fi
          
          echo "‚úÖ No critical vulnerabilities found"

  deploy-blue-green:
    name: Blue-Green Deploy to Production ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production
      url: https://myapp.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create backup of current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_SERVICE }} \
            --query 'taskDefinition' > /tmp/task-def-backup.json
          echo "Backup created"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Deploy Amazon ECS task definition (Blue-Green)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          codedeploy-appspec: appspec.yaml
          codedeploy-application: myapp-prod
          codedeploy-deployment-group: myapp-prod-dg

      - name: Wait for deployment stabilization
        run: |
          echo "Waiting for service to stabilize..."
          sleep 60

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          sleep 30
          # Add your production smoke test commands here
          echo "Smoke tests completed"

      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment to PRODUCTION successful!"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Image: ${{ needs.build-and-push.outputs.image }}"
          echo "Cluster: ${{ env.ECS_CLUSTER }}"
          echo "Service: ${{ env.ECS_SERVICE }}"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ PRODUCTION Deployment successful!"
          echo "üöÄ New version deployed to production"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed! Initiating rollback..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment
          echo "Rollback initiated"

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-blue-green
    if: success()
    steps:
      - name: Tag successful deployment
        run: |
          echo "Creating deployment tag..."
          
      - name: Update monitoring dashboards
        run: |
          echo "Updating monitoring dashboards..."
          
      - name: Send notifications
        run: |
          echo "Sending deployment notifications..."
          echo "‚úÖ Production deployment completed successfully"
