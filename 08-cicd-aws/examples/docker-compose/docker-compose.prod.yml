version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: myapp-prod:latest
    container_name: myapp-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=warn
      - ENVIRONMENT=prod
      - DATABASE_HOST=postgres-prod
      - REDIS_HOST=redis-prod
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
    env_file:
      - .env.prod
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_started
    networks:
      - prod-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2048M
        reservations:
          cpus: '0.5'
          memory: 1024M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        compress: "true"
    restart: unless-stopped

  postgres-prod:
    image: postgres:15-alpine
    container_name: postgres-prod
    environment:
      - POSTGRES_DB=myapp_prod
      - POSTGRES_USER=produser
    env_file:
      - .env.prod
    ports:
      - "5434:5432"
    volumes:
      - postgres-prod-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - prod-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2048M
        reservations:
          cpus: '1.0'
          memory: 1024M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U produser -d myapp_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        compress: "true"
    restart: unless-stopped

  redis-prod:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6381:6379"
    volumes:
      - redis-prod-data:/data
    networks:
      - prod-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        compress: "true"
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - prod-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        compress: "true"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - prod-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - prod-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres-prod-data:
  redis-prod-data:
  nginx-logs:
  prometheus-data:
  grafana-data:

networks:
  prod-network:
    driver: bridge
