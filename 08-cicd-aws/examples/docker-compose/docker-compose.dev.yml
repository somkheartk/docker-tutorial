version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: myapp-dev:latest
    container_name: myapp-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
      - ENVIRONMENT=dev
      - DATABASE_HOST=postgres-dev
      - REDIS_HOST=redis-dev
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_started
    volumes:
      - ./src:/app/src
      - /app/node_modules
    networks:
      - dev-network
    restart: unless-stopped

  postgres-dev:
    image: postgres:15-alpine
    container_name: postgres-dev
    environment:
      - POSTGRES_DB=myapp_dev
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass123
    ports:
      - "5432:5432"
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d myapp_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis-dev:
    image: redis:7-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - dev-network
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog-dev
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - dev-network
    restart: unless-stopped

volumes:
  postgres-dev-data:
  redis-dev-data:

networks:
  dev-network:
    driver: bridge
